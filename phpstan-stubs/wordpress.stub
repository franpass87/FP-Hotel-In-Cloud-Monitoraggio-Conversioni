<?php
/**
 * WordPress function stubs for PHPStan
 * 
 * This file provides basic WordPress function signatures for static analysis
 */

// WordPress Constants
define('ABSPATH', '/wordpress/');
define('WP_CONTENT_DIR', '/wordpress/wp-content');
define('WPINC', 'wp-includes');
define('WP_DEBUG', false);

// Core WordPress functions
function add_action(string $hook_name, callable $callback, int $priority = 10, int $accepted_args = 1): bool {}
function add_filter(string $hook_name, callable $callback, int $priority = 10, int $accepted_args = 1): bool {}
function remove_action(string $hook_name, callable $callback, int $priority = 10): bool {}
function remove_filter(string $hook_name, callable $callback, int $priority = 10): bool {}
function do_action(string $hook_name, ...$args): void {}
function apply_filters(string $hook_name, $value, ...$args) {}

// Admin functions
function add_options_page(string $page_title, string $menu_title, string $capability, string $menu_slug, callable $callback = null): string|false {}
function add_menu_page(string $page_title, string $menu_title, string $capability, string $menu_slug, callable $callback = null, string $icon_url = '', int $position = null): string {}
function add_submenu_page(string $parent_slug, string $page_title, string $menu_title, string $capability, string $menu_slug, callable $callback = null): string|false {}

// Settings API
function register_setting(string $option_group, string $option_name, array $args = []): void {}
function add_settings_section(string $id, string $title, callable $callback, string $page): void {}
function add_settings_field(string $id, string $title, callable $callback, string $page, string $section = 'default', array $args = []): void {}
function settings_fields(string $option_group): void {}
function do_settings_sections(string $page): void {}

// Option functions
function get_option(string $option, $default_value = false) {}
function update_option(string $option, $value, bool $autoload = null): bool {}
function delete_option(string $option): bool {}

// Security functions
function wp_nonce_field(string|int $action = -1, string $name = '_wpnonce', bool $referer = true, bool $echo = true): string {}
function wp_verify_nonce(string $nonce, string|int $action = -1): int|false {}
function sanitize_text_field(string $str): string {}
function sanitize_email(string $email): string {}
function sanitize_url(string $url, array $protocols = null): string {}
function esc_html(string $text): string {}
function esc_attr(string $text): string {}
function esc_url(string $url, array $protocols = null, string $_context = 'display'): string {}
function esc_js(string $text): string {}
function esc_textarea(string $text): string {}

// HTTP functions
function wp_remote_get(string $url, array $args = []): array|\WP_Error {}
function wp_remote_post(string $url, array $args = []): array|\WP_Error {}
function wp_remote_request(string $url, array $args = []): array|\WP_Error {}
function wp_remote_retrieve_body(array|\WP_Error $response): string {}
function wp_remote_retrieve_headers(array|\WP_Error $response): array {}
function wp_remote_retrieve_response_code(array|\WP_Error $response): int|string {}
function wp_remote_retrieve_response_message(array|\WP_Error $response): string {}

// Error functions
function is_wp_error($thing): bool {}
function wp_die(string|\WP_Error $message = '', string|int $title = '', string|array|int $args = []): void {}

// User functions
function current_user_can(string $capability, ...$args): bool {}
function is_user_logged_in(): bool {}
function wp_get_current_user(): \WP_User {}

// Plugin functions
function plugin_dir_path(string $file): string {}
function plugin_dir_url(string $file): string {}
function plugin_basename(string $file): string {}

// URL functions
function admin_url(string $path = '', string $scheme = 'admin'): string {}
function site_url(string $path = '', string $scheme = null): string {}
function home_url(string $path = '', string $scheme = null): string {}

// Conditional functions
function is_admin(): bool {}
function is_ssl(): bool {}
function is_multisite(): bool {}

// Cron functions
function wp_schedule_event(int $timestamp, string $recurrence, string $hook, array $args = [], bool $wp_error = false): bool|\WP_Error {}
function wp_next_scheduled(string $hook, array $args = []): int|false {}
function wp_unschedule_event(int $timestamp, string $hook, array $args = [], bool $wp_error = false): bool|\WP_Error {}
function wp_clear_scheduled_hook(string $hook, array $args = []): int|false {}

// Script/Style functions
function wp_enqueue_script(string $handle, string $src = '', array $deps = [], string|bool|null $ver = false, bool $in_footer = false): void {}
function wp_enqueue_style(string $handle, string $src = '', array $deps = [], string|bool|null $ver = false, string $media = 'all'): void {}
function wp_register_script(string $handle, string|false $src, array $deps = [], string|bool|null $ver = false, bool $in_footer = false): bool {}
function wp_register_style(string $handle, string|false $src, array $deps = [], string|bool|null $ver = false, string $media = 'all'): bool {}

// WordPress globals
global $wpdb;
$wpdb = new \wpdb();

global $wp_version;
$wp_version = '6.0';

// WordPress classes
class WP_Error {
    public function __construct(string $code = '', string $message = '', $data = '') {}
    public function get_error_codes(): array {}
    public function get_error_code(): string|int {}
    public function get_error_messages(string $code = ''): array {}
    public function get_error_message(string $code = ''): string {}
    public function get_error_data(string $code = '') {}
    public function has_errors(): bool {}
    public function add(string $code, string $message, $data = ''): void {}
}

class WP_User {
    public int $ID;
    public string $user_login;
    public string $user_email;
    public function __construct(int $id = 0, string $name = '', string $site_id = '') {}
    public function has_cap(string $cap): bool {}
}

class wpdb {
    public string $prefix;
    public function prepare(string $query, ...$args): string {}
    public function get_results(string $query, string $output = OBJECT): array|object|null {}
    public function get_row(string $query, string $output = OBJECT, int $y = 0): array|object|null {}
    public function get_var(string $query, int $x = 0, int $y = 0): string|null {}
    public function insert(string $table, array $data, array $format = null): int|false {}
    public function update(string $table, array $data, array $where, array $format = null, array $where_format = null): int|false {}
    public function delete(string $table, array $where, array $where_format = null): int|false {}
}

// WordPress constants commonly used
define('OBJECT', 'OBJECT');
define('ARRAY_A', 'ARRAY_A');
define('ARRAY_N', 'ARRAY_N');